#include "IRremote.h"
#include <Servo.h>

int IRreceiver = 11;
int motorPin = 9;

int button1 = 3; // pins for buttons that can be used
int button2 = 4;
int button3 = 5;

int ledPin = 7;

int pos;
int potpin = A0; // potpin needs analog signal
int val;

bool potMode = false; // changes based on whether EQ mode is pressed or not

Servo myservo;
IRrecv irrecv(IRreceiver);
decode_results results;

bool pwr = false ; // power true once , false twice or zero
bool one = false; //true once , false twice 
bool two = false; //true once , false twice 


void translateIR(){
  switch(results.value){
    case 0xFFA25D: Serial.println("POWER"); pwr = !pwr; break;
    case 0xFF30CF: Serial.println("1"); one = !one; break;
    case 0xFF18E7: Serial.println("2"); two = !two; break;
    case 0xFF9867: Serial.println("EQ"); potMode = !potMode; break;
    default:Serial.println("other button"); break;
  }
  delay(100);
}

void setup() {
Serial.begin(9600);
irrecv.enableIRIn();//start reciver
myservo.attach(motorPin);

pinMode(button1, INPUT_PULLUP);
pinMode(button2, INPUT_PULLUP);
pinMode(button3, INPUT_PULLUP);


  cli();
  EIMSK |= (1 << INT0);
   // Trigger INT0 on falling edge
  EICRA |= (1 << ISC01);

  TCCR1A = 0; //Set timer control to 0
  TCCR1B = 0;
  TCNT1 = 0;
  OCR1A = 32767;
  //Enable timer1 overflow interrupt
  TIMSK1 = (1 << OCIE1A);
  TCCR1B |= (1 << WGM12);
  //SET CS12 bit to 1 â€“ Use clock speed
  TCCR1B |= (1<<CS12);
  TCCR1B |= (1<<CS10);

  sei();
}


ISR(TIMER1_COMPA_vect) { // timer interrupt that dumps food for 1 second by default when interrupt goes off
  // simulates food dumping at set time of day
    digitalWrite(ledPin, HIGH);
    pos = 60;
    myservo.write(pos);
    delay(1000);
    pos = 0;
    myservo.write(pos);
    digitalWrite(ledPin, LOW);
}

void loop() {
    if (irrecv.decode(&results)){
    translateIR();
    irrecv.resume();
  }
    if(one){ // if one on remote pressed
      potMode = false;
      digitalWrite(ledPin, HIGH); // turns on LED based on choice, for 1 second in this case
      pos = 60;
      myservo.write(pos); // turns motor 60 degrees and waits for 1 second
      delay(1000);
      pos = 0;
      myservo.write(pos);
      one = !one;
      digitalWrite(ledPin, LOW);
    }
    else if(two){// if two on remote pressed
      potMode = false;
      digitalWrite(ledPin, HIGH); // turns on for 2 seconds
      pos = 60;
      myservo.write(pos); // opens motor 60 degrees and waits for 2 seconds
      delay(2000);
      pos = 0;
      myservo.write(pos);
      two = !two;
      digitalWrite(ledPin, LOW);
    }
    else if(pwr){ // if power button on remote pressed, doesnt wait based on time, manual control by user
      potMode = false;
      if(pos == 0){
        digitalWrite(ledPin, HIGH); // turns on while hatch is open
        pos = 180;
        myservo.write(pos);
      }
      else if(pos == 180){ // checks if motor already at open position
        digitalWrite(ledPin, LOW);
        pos = 0;
        myservo.write(pos);
      }
      pwr = !pwr;
    }
    else if(digitalRead(button1) == LOW){ // button 1 pressed
      potMode = false;
      digitalWrite(ledPin, HIGH);
      pos = 60;
      myservo.write(pos);
      delay(1000);
      pos = 0;
      myservo.write(pos);
      digitalWrite(ledPin, HIGH);
    }
    else if(digitalRead(button2) == LOW){ // button 2 pressed
      potMode = false;
      digitalWrite(ledPin, HIGH);
      pos = 60;
      myservo.write(pos);
      delay(2000);
      pos = 0;
      myservo.write(pos);
      digitalWrite(ledPin, HIGH);
    }
    else if(digitalRead(button3) == LOW){ // button 3 pressed
      potMode = false;
      if(pos == 0){
        digitalWrite(ledPin, HIGH);
        pos = 180;
        myservo.write(pos);
        digitalWrite(ledPin, LOW);
      }
      else if(pos == 180){
        digitalWrite(ledPin, HIGH);
        pos = 0;
        myservo.write(pos);
        digitalWrite(ledPin, LOW);
      }
    }
    // code received from arduino.cc website for pot control
    else if(potMode){ // if eq button set on remote
      val = analogRead(potpin);
      val = map(val, 0, 1023, 0, 180);     // scale it to use it with the servo (value between 0 and 180) 15    
      myservo.write(val);                  // sets the servo position according to the scaled value 16    
      delay(15);  
    }

}
